@import '../../common/focusBorder';

/**
  * Slot definitions
  *
  * Slot definitions must align to the names of the slots themselves. They should:
  *
  * 1. Contain the actual css property definitions (E.g. background-color: {value})
  * 2. Property definitions should map to tokens using the format: {component}-{property}
  * 3. Avoid hard coding values unless there are absolutely no use cases to change
  *    the property value.
  * 4. Order hardcoded css values first, tokens based second. This way we can identify
  *    what is hardcoded easily.
 **/

.root {
  align-items: center;
  border-style: solid;
  display: inline-flex;
  justify-content: center;
  outline: none;
  position: relative;
  user-select: none;
  box-sizing: border-box;
  vertical-align: middle;

  background: var(--button-background, white);
  color: var(--button-contentColor, rgb(44, 38, 33));

  border-color: var(--button-borderColor);
  border-radius: var(--button-borderRadius);
  border-width: var(--button-borderWidth);
  box-shadow: var(--button-boxShadow);

  width: var(--button-width);
  height: var(--button-height);
  min-height: var(--button-minHeight);

  padding: var(--button-padding);
  transition: var(--button-transition);
  white-space: var(--button-whiteSpace, nowrap);

  font-family: var(--button-fontFamily);
  font-size: var(--button-fontSize);
  font-weight: var(--button-fontWeight);

  @include focus-border(
    $padding: -1px,
    $color: var(--button-focusColor),
    $thickness: var(--button-focus-width, 2px),
    $radius: var(--button-borderRadius)
  );
  @include focus-box-shadow($hOffset: 0, $vOffset: 0, $blur: 0, $thickness: 1px, $color: var(--button-focusInnerColor));

  &._size_smallest {
    --button-minHeight: var(--button-size-smallest);
  }

  &._size_smaller {
    --button-minHeight: var(--button-size-smaller);
  }

  &._size_small {
    --button-minHeight: var(--button-size-small);
  }

  &._size_large {
    --button-minHeight: var(--button-size-large);
  }

  &._size_larger {
    --button-minHeight: var(--button-size-larger);
  }
  &._size_largest {
    --button-minHeight: var(--button-size-largest);
  }

  &._disabled {
    pointer-events: none;
    background-color: var(--button-disabled-background);
    color: var(--button-disabled-contentColor);
    border-color: var(--button-disabled-borderColor);
    box-shadow: var(--button-disabled-boxShadow);
  }
}

.icon {
  color: var(--button-iconColor);
  display: flex;
  align-items: center;
  justify-content: center;
  width: var(--button-iconSize);
  height: var(--button-iconSize);
  font-size: var(--button-iconSize, inherit);
  font-weight: normal;

  &._disabled {
    color: var(--button-disabled-iconColor, var(--button-disabled-contentColor));
  }
}

/* selectors */

.root > *:not(:first-child) {
  margin-left: var(--button-contentGap);
}

.root:hover {
  background: var(--button-hovered-background, var(--button-background));
  color: var(--button-hovered-contentColor, var(--button-contentColor));
  border-color: var(--button-hovered-borderColor, var(--button-borderColor));
  box-shadow: var(--button-hovered-boxShadow, var(--button-boxShadow));

  .icon {
    color: var(--button-hovered-iconColor, var(--button-hovered-contentColor));
  }
}

.root:active {
  background: var(--button-pressed-background, var(--button-hovered-background));
  color: var(--button-pressed-contentColor, var(--button-hovered-contentColor, var(--button-contentColor)));
  border-color: var(--button-pressed-borderColor, var(--button-hovered-borderColor, var(--button-borderColor)));
  box-shadow: var(--button-pressed-boxShadow, var(--button-hovered-boxShadow, var(--button-boxShadow)));

  transform: var(--button-pressed-transform);
  transition: var(--button-pressed-transition);

  .icon {
    color: var(--button-pressed-iconColor, var(--button-pressed-contentColor));
  }
}
